1. Загрузка класса A
Когда создаётся объект new A(100), сначала загружается класс A, если он ещё не был загружен. В процессе загрузки выполняются статические блоки 
инициализации (статические блоки static { ... }).

Вывод статического блока:

static logic
Причина: Статические блоки инициализации выполняются один раз при загрузке класса в память.

2. Создание объекта A
Далее создаётся объект класса A. Порядок выполнения следующий:

Нестатические блоки инициализации ({ ... }).
Эти блоки выполняются до вызова конструктора, но после инициализации полей.

Инициализация нестатических полей.
Поле id инициализируется значением 1.

Нестатические блоки инициализации выполняются в порядке их объявления.

Первый нестатический блок:

System.out.println("logic (1) id= " + this.id);
На этом этапе поле id уже инициализировано значением 1.
Вывод:


logic (1) id= 1
Второй нестатический блок:

System.out.println("logic (2) id= " + id);
Поле id по-прежнему равно 1, так как конструктор ещё не был вызван.
Вывод:

logic (2) id= 1
3. Вызов конструктора
После выполнения всех нестатических блоков инициализации вызывается конструктор:

public A(int id) {
    this.id = id;
    System.out.println("ctor id= " + id);
}
В конструктор передаётся id = 100.
Значение поля id перезаписывается:

this.id = 100;
Вывод:

ctor id= 100
Итоговый порядок вывода
static logic — статический блок выполняется при загрузке класса A.
logic (1) id= 1 — выполняется первый нестатический блок, id ещё имеет значение по умолчанию 1.
logic (2) id= 1 — выполняется второй нестатический блок, id всё ещё равно 1, потому что конструктор ещё не вызван.
ctor id= 100 — конструктор перезаписывает значение поля id и выводит сообщение.
Итоговый вывод программы
static logic
logic (1) id= 1
logic (2) id= 1
ctor id= 100
Объяснение порядка выполнения
Статический блок инициализации выполняется при загрузке класса.
Нестатические блоки инициализации выполняются при создании экземпляра класса до конструктора.
Конструктор вызывается после выполнения всех нестатических блоков инициализации.
Этот порядок часто используется для установки начальных значений полей или выполнения предварительных действий перед вызовом конструктора.
